import Foundation
import FirebaseFirestore
import FirebaseAuth

// –≠—Ç–æ—Ç –∫–ª–∞—Å—Å —Å–ª—É–∂–∏—Ç –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ Firestore
// –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏ –±–∞–∑–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
class FirestoreService {
    // –û–±—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–æ –≤—Å–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
    static let shared = FirestoreService()
    
    // –≠–∫–∑–µ–º–ø–ª—è—Ä Firestore
    private let db = Firestore.firestore()
    
    private init() {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Firestore –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ Firebase SDK
        // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞
        print("üî• Firestore initialized successfully")
    }
    
    // MARK: - –û–±—â–∏–µ –º–µ—Ç–æ–¥—ã
    
    // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    func currentUserId() -> String? {
        return Auth.auth().currentUser?.uid
    }
    
    // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    func getCurrentUserGroup(completion: @escaping (String?, String?, Error?) -> Void) {
        guard let userId = currentUserId() else {
            completion(nil, nil, NSError(domain: "FirestoreService", code: 1, userInfo: [NSLocalizedDescriptionKey: "User not logged in"]))
            return
        }
        
        db.collection("users").document(userId).getDocument { document, error in
            if let error = error {
                completion(nil, nil, error)
                return
            }
            
            guard let document = document, document.exists, let data = document.data() else {
                completion(nil, nil, NSError(domain: "FirestoreService", code: 2, userInfo: [NSLocalizedDescriptionKey: "User document not found"]))
                return
            }
            
            guard let groupId = data["groupId"] as? String else {
                completion(nil, nil, NSError(domain: "FirestoreService", code: 3, userInfo: [NSLocalizedDescriptionKey: "User has no group"]))
                return
            }
            
            // Get group name
            self.db.collection("groups").document(groupId).getDocument { groupDoc, error in
                if let error = error {
                    completion(groupId, nil, error)
                    return
                }
                
                guard let groupDoc = groupDoc, let groupData = groupDoc.data() else {
                    completion(groupId, nil, NSError(domain: "FirestoreService", code: 4, userInfo: [NSLocalizedDescriptionKey: "Group document not found"]))
                    return
                }
                
                let groupName = groupData["name"] as? String ?? "Unknown Group"
                completion(groupId, groupName, nil)
            }
        }
    }
    
    // MARK: - –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    
    // –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –≥—Ä—É–ø–ø—ã
    func generateGroupCode() -> String {
        let letters = "ABCDEFGHJKLMNPQRSTUVWXYZ23456789" // –ë–µ–∑ –ø–æ—Ö–æ–∂–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        return String((0..<6).map{ _ in letters.randomElement()! })
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–¥ –≥—Ä—É–ø–ø—ã
    func checkGroupCode(_ code: String, completion: @escaping (Bool, Error?) -> Void) {
        db.collection("groups").whereField("code", isEqualTo: code).getDocuments { snapshot, error in
            if let error = error {
                completion(false, error)
                return
            }
            
            guard let snapshot = snapshot else {
                completion(false, nil)
                return
            }
            
            completion(!snapshot.documents.isEmpty, nil)
        }
    }
    
    // MARK: - –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    
    // –ü–æ–ª—É—á–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    func getUserRole(completion: @escaping (String?, Error?) -> Void) {
        guard let userId = currentUserId() else {
            completion(nil, NSError(domain: "FirestoreService", code: 1, userInfo: [NSLocalizedDescriptionKey: "User not logged in"]))
            return
        }
        
        db.collection("users").document(userId).getDocument { document, error in
            if let error = error {
                completion(nil, error)
                return
            }
            
            guard let document = document, document.exists, let data = document.data() else {
                completion(nil, NSError(domain: "FirestoreService", code: 2, userInfo: [NSLocalizedDescriptionKey: "User document not found"]))
                return
            }
            
            let role = data["role"] as? String ?? "Unknown"
            completion(role, nil)
        }
    }
    
    // MARK: - –î–æ—Å—Ç—É–ø –∫ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º Firestore
    
    // –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    func usersCollection() -> CollectionReference {
        return db.collection("users")
    }
    
    // –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—é –≥—Ä—É–ø–ø
    func groupsCollection() -> CollectionReference {
        return db.collection("groups")
    }
    
    // –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—é —Å–æ–±—ã—Ç–∏–π
    func eventsCollection() -> CollectionReference {
        return db.collection("events")
    }
    
    // –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—é —Å–µ—Ç–ª–∏—Å—Ç–æ–≤
    func setlistsCollection() -> CollectionReference {
        return db.collection("setlists")
    }
    
    // –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—é –∑–∞–¥–∞—á
    func tasksCollection() -> CollectionReference {
        return db.collection("tasks")
    }
    
    // –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—é —á–∞—Ç–æ–≤
    func chatRoomsCollection() -> CollectionReference {
        return db.collection("chatRooms")
    }
    
    // –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—é –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    func contactsCollection() -> CollectionReference {
        return db.collection("contacts")
    }
    
    // –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤
    func financesCollection() -> CollectionReference {
        return db.collection("finances")
    }
}
