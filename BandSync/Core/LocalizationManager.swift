import Foundation
import SwiftUI

class LocalizationManager: ObservableObject {
    static let shared = LocalizationManager()
    
    @Published var currentLanguage: Language {
        didSet {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –≤ UserDefaults
            UserDefaults.standard.set(currentLanguage.rawValue, forKey: "app_language")
            updateLocale()
            
            // –ü—É–±–ª–∏–∫—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞
            NotificationCenter.default.post(name: Notification.Name("LanguageChanged"), object: nil)
        }
    }
    
    // –î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –¢–ó
    let availableLanguages: [Language] = [.english, .german, .ukrainian]
    
    private init() {
        // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —è–∑—ã–∫ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if let savedLanguage = UserDefaults.standard.string(forKey: "app_language"),
           let language = Language(rawValue: savedLanguage) {
            self.currentLanguage = language
        } else {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ —Å–∏—Å—Ç–µ–º–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
            let preferredLanguage = Locale.preferredLanguages.first ?? "en"
            
            if preferredLanguage.hasPrefix("de") {
                self.currentLanguage = .german
            } else if preferredLanguage.hasPrefix("uk") {
                self.currentLanguage = .ukrainian
            } else {
                self.currentLanguage = .english
            }
        }
        
        updateLocale()
    }
    
    private func updateLocale() {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        UserDefaults.standard.set([currentLanguage.rawValue], forKey: "AppleLanguages")
        UserDefaults.standard.synchronize()
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    func localizedString(_ key: String, defaultValue: String = "") -> String {
        let path = Bundle.main.path(forResource: currentLanguage.rawValue, ofType: "lproj")
        let bundle = path != nil ? Bundle(path: path!) : Bundle.main
        let localizedString = NSLocalizedString(key, tableName: nil, bundle: bundle ?? Bundle.main, value: "", comment: "")
        
        // –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º defaultValue –∏–ª–∏ –∫–ª—é—á
        return localizedString == key ? (defaultValue.isEmpty ? key : defaultValue) : localizedString
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
    func setLanguage(_ language: Language) {
        self.currentLanguage = language
    }
}

// –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤
enum Language: String, CaseIterable, Identifiable {
    case english = "en"
    case german = "de"
    case ukrainian = "uk"
    
    var id: String { self.rawValue }
    
    var displayName: String {
        switch self {
        case .english: return "English üá¨üáß"
        case .german: return "Deutsch üá©üá™"
        case .ukrainian: return "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ üá∫üá¶"
        }
    }
    
    var locale: Locale {
        return Locale(identifier: self.rawValue)
    }
}

// –û–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è —è–∑—ã–∫–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ SwiftUI
struct LocalizationEnvironmentKey: EnvironmentKey {
    static let defaultValue: Language = .english
}

extension EnvironmentValues {
    var currentLanguage: Language {
        get { self[LocalizationEnvironmentKey.self] }
        set { self[LocalizationEnvironmentKey.self] = newValue }
    }
}
