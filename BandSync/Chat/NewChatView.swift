import SwiftUI
import FirebaseFirestore
import FirebaseAuth

struct NewChatView: View {
    let chatService: ChatService
    @Environment(\.presentationMode) var presentationMode
    
    @State private var chatName = ""
    @State private var isGroupChat = false
    @State private var selectedUsers: [UserInfo] = []
    @State private var availableUsers: [UserInfo] = []
    @State private var searchText = ""
    @State private var isCreatingChat = false
    
    var filteredUsers: [UserInfo] {
        if searchText.isEmpty {
            return availableUsers
        } else {
            return availableUsers.filter {
                $0.name.lowercased().contains(searchText.lowercased()) ||
                $0.email.lowercased().contains(searchText.lowercased())
            }
        }
    }
    
    var body: some View {
        NavigationView {
            Form {
                Section(header: Text("–¢–∏–ø —á–∞—Ç–∞")) {
                    Toggle("–ì—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç", isOn: $isGroupChat)
                }
                
                if isGroupChat {
                    Section(header: Text("–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞")) {
                        TextField("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞", text: $chatName)
                    }
                }
                
                Section(header: Text("–£—á–∞—Å—Ç–Ω–∏–∫–∏")) {
                    if !selectedUsers.isEmpty {
                        List {
                            ForEach(selectedUsers) { user in
                                HStack {
                                    Text(user.name)
                                    Spacer()
                                    Button(action: {
                                        selectedUsers.removeAll { $0.id == user.id }
                                    }) {
                                        Image(systemName: "minus.circle.fill")
                                            .foregroundColor(.red)
                                    }
                                }
                            }
                        }
                    }
                }
                
                Section(header: Text("–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")) {
                    ForEach(filteredUsers) { user in
                        if !selectedUsers.contains(where: { $0.id == user.id }) &&
                           user.id != chatService.currentUserId {
                            HStack {
                                Text(user.name)
                                Spacer()
                                Button(action: {
                                    selectedUsers.append(user)
                                }) {
                                    Image(systemName: "plus.circle.fill")
                                        .foregroundColor(.green)
                                }
                            }
                        }
                    }
                }
                .searchable(text: $searchText, prompt: "–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                
                Section {
                    Button(action: createChat) {
                        if isCreatingChat {
                            ProgressView()
                                .progressViewStyle(CircularProgressViewStyle())
                        } else {
                            Text("–°–æ–∑–¥–∞—Ç—å —á–∞—Ç")
                                .frame(maxWidth: .infinity)
                                .bold()
                        }
                    }
                    .disabled(!isFormValid || isCreatingChat)
                }
            }
            .navigationTitle("–ù–æ–≤—ã–π —á–∞—Ç")
            .navigationBarItems(trailing: Button("–û—Ç–º–µ–Ω–∞") {
                presentationMode.wrappedValue.dismiss()
            })
            .onAppear {
                fetchUsers()
            }
        }
    }
    
    private var isFormValid: Bool {
        if selectedUsers.isEmpty {
            return false
        }
        
        if isGroupChat && chatName.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty {
            return false
        }
        
        return true
    }
    
    private func createChat() {
        isCreatingChat = true
        let userIds = selectedUsers.map { $0.id }
        
        if isGroupChat {
            // –ì—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º
            chatService.createChat(
                name: chatName.trimmingCharacters(in: .whitespacesAndNewlines),
                participants: userIds,
                isGroupChat: true
            )
        } else if let firstUser = selectedUsers.first {
            // –õ–∏—á–Ω—ã–π —á–∞—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            chatService.createChat(
                name: firstUser.name,
                participants: [firstUser.id],
                isGroupChat: false
            )
        }
        
        // –î–∞–µ–º –≤—Ä–µ–º—è Firebase –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å
        DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
            isCreatingChat = false
            presentationMode.wrappedValue.dismiss()
        }
    }
    
    private func fetchUsers() {
        let db = Firestore.firestore()
        print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏–º –≥—Ä—É–ø–ø—É —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        guard let currentUserId = chatService.currentUserId else { return }
        
        db.collection("users").document(currentUserId).getDocument { document, error in
            if let error = error {
                print("‚õîÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: \(error.localizedDescription)")
                return
            }
            
            guard let document = document,
                  let data = document.data(),
                  let groupId = data["groupId"] as? String else {
                print("‚õîÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return
            }
            
            // –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ
            db.collection("users").whereField("groupId", isEqualTo: groupId).getDocuments { snapshot, error in
                if let error = error {
                    print("‚õîÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: \(error.localizedDescription)")
                    return
                }
                
                if let documents = snapshot?.documents {
                    print("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ \(documents.count) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                    
                    availableUsers = documents.compactMap { document -> UserInfo? in
                        let data = document.data()
                        
                        let name = data["name"] as? String ?? data["email"] as? String ?? "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                        let email = data["email"] as? String ?? ""
                        
                        return UserInfo(
                            id: document.documentID,
                            name: name,
                            email: email
                        )
                    }
                    
                    print("üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: \(availableUsers.count)")
                }
            }
        }
    }
}
