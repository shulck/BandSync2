import SwiftUI
import Firebase
import FirebaseAuth
import FirebaseFirestore
import FirebaseStorage // –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç Firebase Storage
import UserNotifications

@main
struct BandSyncApp: App {
    @UIApplicationDelegateAdaptor(AppDelegate.self) var appDelegate
    @StateObject private var localizationManager = LocalizationManager.shared
    @State private var appReloadTrigger = UUID()

    let persistenceController = PersistenceController.shared

    init() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        let _ = NotificationService.shared
        
        // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –¥–ª—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
        NotificationCenter.default.addObserver(
            forName: Notification.Name("LanguageChanged"),
            object: nil,
            queue: .main
        ) { _ in
            // –≠—Ç–æ—Ç –∫–æ–¥ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞
            print("üåê Language changed to: \(LocalizationManager.shared.currentLanguage.rawValue)")
        }
        
        // –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        NotificationCenter.default.addObserver(
            forName: NSNotification.Name("ForceAppReload"),
            object: nil,
            queue: .main
        ) { [self] _ in
            // –°–º–µ–Ω–∞ —ç—Ç–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞—Å—Ç–∞–≤–∏—Ç SwiftUI –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            self.appReloadTrigger = UUID()
            print("üîÑ Forced app reload")
        }
    }

    var body: some Scene {
        WindowGroup {
            ContentView()
                .environment(\.managedObjectContext, persistenceController.container.viewContext)
                .environmentObject(localizationManager)
                .id(appReloadTrigger) // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ ID
        }
    }
}

class AppDelegate: NSObject, UIApplicationDelegate, UNUserNotificationCenterDelegate {
    func application(_ application: UIApplication,
                     didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]? = nil) -> Bool {
        FirebaseApp.configure()
        print("üî• Firebase successfully initialized!")
        Firestore.firestore() // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firestore
        Storage.storage() // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase Storage
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–µ–Ω—Ç—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        UNUserNotificationCenter.current().delegate = self
        NotificationService.shared.setupNotificationActions()
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        configureSecuritySettings()
        
        return true
    }
    
    private func configureSecuritySettings() {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∑–∞—â–∏—Ç—ã –¥–∞–Ω–Ω—ã—Ö
        
        // 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Firebase
        let auth = Auth.auth()
        auth.settings?.isAppVerificationDisabledForTesting = false
        
        // 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Firestore
        let db = Firestore.firestore()
        let settings = db.settings
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é TLS
        settings.isSSLEnabled = true
        db.settings = settings
        
        // 3. –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–∂–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        print("üîê Security settings configured successfully")
    }
    
    // MARK: - UNUserNotificationCenterDelegate
    
    func userNotificationCenter(_ center: UNUserNotificationCenter, willPresent notification: UNNotification, withCompletionHandler completionHandler: @escaping (UNNotificationPresentationOptions) -> Void) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Ñ–æ–∫—É—Å–µ
        completionHandler([.banner, .sound, .badge])
    }
    
    func userNotificationCenter(_ center: UNUserNotificationCenter, didReceive response: UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Void) {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        let userInfo = response.notification.request.content.userInfo
        
        switch response.actionIdentifier {
        case "VIEW_EVENT":
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è
            if let eventId = userInfo["eventId"] as? String {
                // –ó–¥–µ—Å—å –∫–æ–¥ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫ –¥–µ—Ç–∞–ª—è–º —Å–æ–±—ã—Ç–∏—è
                print("Opening event with ID: \(eventId)")
            }
        case "REMIND_LATER":
            // –ù–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ–∑–∂–µ
            if let eventId = userInfo["eventId"] as? String,
               let eventTitle = userInfo["eventTitle"] as? String,
               let eventLocation = userInfo["eventLocation"] as? String {
                
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç
                let content = UNMutableNotificationContent()
                content.title = "Reminder: \(eventTitle)"
                content.body = "Location: \(eventLocation)"
                content.sound = .default
                
                let trigger = UNTimeIntervalNotificationTrigger(timeInterval: 30 * 60, repeats: false)
                let request = UNNotificationRequest(identifier: "reminder-later-\(eventId)", content: content, trigger: trigger)
                
                center.add(request) { error in
                    if let error = error {
                        print("Error scheduling reminder: \(error.localizedDescription)")
                    }
                }
            }
        default:
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
            if let eventId = userInfo["eventId"] as? String {
                print("Opening event with ID: \(eventId)")
            }
        }
        
        completionHandler()
    }
}
